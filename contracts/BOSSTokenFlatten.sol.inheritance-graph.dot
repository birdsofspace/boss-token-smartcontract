digraph "" {
IUniswapV2Router01[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router01</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    factory()</TD></TR><TR><TD align="left">    WETH()</TD></TR><TR><TD align="left">    addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    addLiquidityETH(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    swapExactTokensForTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapTokensForExactTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactETHForTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapTokensForExactETH(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactTokensForETH(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapETHForExactTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    quote(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountOut(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountIn(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountsOut(uint256,address[])</TD></TR><TR><TD align="left">    getAmountsIn(uint256,address[])</TD></TR></TABLE> >];

IUniswapV2Router02 -> IUniswapV2Router01;
IUniswapV2Router02[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router02</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)</TD></TR></TABLE> >];

Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkInitializing()</TD></TR><TR><TD align="left">    _disableInitializers()</TD></TR><TR><TD align="left">    _getInitializedVersion()</TD></TR><TR><TD align="left">    _isInitializing()</TD></TR><TR><TD align="left">    _getInitializableStorage()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left">    reinitializer(uint64)</TD></TR><TR><TD align="left">    onlyInitializing()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    INITIALIZABLE_STORAGE</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

IUniswapV2Factory[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Factory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    feeTo()</TD></TR><TR><TD align="left">    feeToSetter()</TD></TR><TR><TD align="left">    getPair(address,address)</TD></TR><TR><TD align="left">    allPairs(uint256)</TD></TR><TR><TD align="left">    allPairsLength()</TD></TR><TR><TD align="left">    createPair(address,address)</TD></TR><TR><TD align="left">    setFeeTo(address)</TD></TR><TR><TD align="left">    setFeeToSetter(address)</TD></TR></TABLE> >];

tokenRecipient[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>tokenRecipient</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    receiveApproval(address,uint256,address,bytes)</TD></TR></TABLE> >];

BOSSToken -> Initializable;
BOSSToken[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>BOSSToken</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address,address)</TD></TR><TR><TD align="left">    createRole(bytes32,address)</TD></TR><TR><TD align="left">    removeRole(bytes32,address)</TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    toggleAutoSale(bool)</TD></TR><TR><TD align="left">    setPriceTokenAutoSale(uint256)</TD></TR><TR><TD align="left">    createPair(address)</TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left">    setMarketingAddress(address)</TD></TR><TR><TD align="left">    setTeamAddress(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    approveAndCall(address,uint256,bytes)</TD></TR><TR><TD align="left">    burn(uint256)</TD></TR><TR><TD align="left">    burnFrom(address,uint256)</TD></TR><TR><TD align="left">    reallocationEther()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    autoSale</TD></TR><TR><TD align="left">    priceTokenAutoSale</TD></TR><TR><TD align="left">    uniswapRouter<font color="blue" POINT-SIZE="10"> (IUniswapV2Router02)</font></TD></TR><TR><TD align="left">    uniswapFactory</TD></TR><TR><TD align="left">    marketingAddress</TD></TR><TR><TD align="left">    teamAddress</TD></TR><TR><TD align="left">    name</TD></TR><TR><TD align="left">    symbol</TD></TR><TR><TD align="left">    decimals</TD></TR><TR><TD align="left">    totalSupply</TD></TR><TR><TD align="left">    tokenPairKeys</TD></TR><TR><TD align="left">    tokenPairs</TD></TR><TR><TD align="left">    balanceOf</TD></TR><TR><TD align="left">    allowance</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    isDevelopmentUsingProxy</TD></TR><TR><TD align="left">    roles</TD></TR></TABLE> >];

}