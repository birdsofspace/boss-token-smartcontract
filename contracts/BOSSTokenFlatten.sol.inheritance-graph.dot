digraph "" {
AddressUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AddressUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResultFromTarget(address,bool,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR><TR><TD align="left">    _revert(bytes,string)</TD></TR></TABLE> >];

Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _disableInitializers()</TD></TR><TR><TD align="left">    _getInitializedVersion()</TD></TR><TR><TD align="left">    _isInitializing()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left">    reinitializer(uint8)</TD></TR><TR><TD align="left">    onlyInitializing()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _initialized</TD></TR><TR><TD align="left">    _initializing</TD></TR></TABLE> >];

ReentrancyGuardUpgradeable -> Initializable;
ReentrancyGuardUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuardUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ReentrancyGuard_init()</TD></TR><TR><TD align="left">    __ReentrancyGuard_init_unchained()</TD></TR><TR><TD align="left">    _nonReentrantBefore()</TD></TR><TR><TD align="left">    _nonReentrantAfter()</TD></TR><TR><TD align="left">    _reentrancyGuardEntered()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _NOT_ENTERED</TD></TR><TR><TD align="left">    _ENTERED</TD></TR><TR><TD align="left">    _status</TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

IERC20Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

IERC20MetadataUpgradeable -> IERC20Upgradeable;
IERC20MetadataUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20MetadataUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

ContextUpgradeable -> Initializable;
ContextUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ContextUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Context_init()</TD></TR><TR><TD align="left">    __Context_init_unchained()</TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR><TR><TD align="left">    _contextSuffixLength()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

ERC20Upgradeable -> Initializable [ label="1" ];
ERC20Upgradeable -> ContextUpgradeable [ label="2" ];
ERC20Upgradeable -> IERC20Upgradeable [ label="3" ];
ERC20Upgradeable -> IERC20MetadataUpgradeable [ label="4" ];
ERC20Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC20_init(string,string)</TD></TR><TR><TD align="left">    __ERC20_init_unchained(string,string)</TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _spendAllowance(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

IUniswapV2Router01[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router01</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    factory()</TD></TR><TR><TD align="left">    WETH()</TD></TR><TR><TD align="left">    addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    addLiquidityETH(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    swapExactTokensForTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapTokensForExactTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactETHForTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapTokensForExactETH(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactTokensForETH(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapETHForExactTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    quote(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountOut(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountIn(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountsOut(uint256,address[])</TD></TR><TR><TD align="left">    getAmountsIn(uint256,address[])</TD></TR></TABLE> >];

IUniswapV2Router02 -> IUniswapV2Router01;
IUniswapV2Router02[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Router02</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)</TD></TR><TR><TD align="left">    swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    verifyCallResultFromTarget(address,bool,bytes)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes)</TD></TR><TR><TD align="left">    _revert(bytes)</TD></TR></TABLE> >];

IUniswapV2Factory[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV2Factory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    feeTo()</TD></TR><TR><TD align="left">    feeToSetter()</TD></TR><TR><TD align="left">    getPair(address,address)</TD></TR><TR><TD align="left">    allPairs(uint256)</TD></TR><TR><TD align="left">    allPairsLength()</TD></TR><TR><TD align="left">    createPair(address,address)</TD></TR><TR><TD align="left">    setFeeTo(address)</TD></TR><TR><TD align="left">    setFeeToSetter(address)</TD></TR></TABLE> >];

BOSSToken -> ERC20Upgradeable [ label="1" ];
BOSSToken -> ReentrancyGuardUpgradeable [ label="2" ];
BOSSToken[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>BOSSToken</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address)</TD></TR><TR><TD align="left">    toggleSwapFee(bool)</TD></TR><TR><TD align="left">    createRole(bytes32,address)</TD></TR><TR><TD align="left">    removeRole(bytes32,address)</TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    createPair(address)</TD></TR><TR><TD align="left">    setMarketingAddress(address)</TD></TR><TR><TD align="left">    setTeamAddress(address)</TD></TR><TR><TD align="left">    reallocationEther()</TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    shouldTakeFee(address,address)</TD></TR><TR><TD align="left"><font color="#FFA500">    _transfer(address,address,uint256)</font></TD></TR><TR><TD align="left">    _distributeFee(address,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    enabledSwapFee</TD></TR><TR><TD align="left">    tokenPairKeys</TD></TR><TR><TD align="left">    tokenPairs</TD></TR><TR><TD align="left">    marketingAddress</TD></TR><TR><TD align="left">    teamAddress</TD></TR><TR><TD align="left">    uniswapRouter<font color="blue" POINT-SIZE="10"> (IUniswapV2Router02)</font></TD></TR><TR><TD align="left">    uniswapFactory</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    bether</TD></TR><TR><TD align="left">    roles</TD></TR></TABLE> >];

}